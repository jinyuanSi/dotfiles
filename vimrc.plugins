source $VIMRUNTIME/ftplugin/man.vim

" ---------------------------------------------------
Plugin 'VundleVim/Vundle.Vim'

" ---------------------------------------------------
Plugin 'ludovicchabant/vim-gutentags'

"let g:gutentags_trace = 1 " debug gtags if it does not work
let g:gutentags_define_advanced_commands = 1

" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
    let g:gutentags_modules += ['ctags']
endif

if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let g:gutentags_cache_dir = expand('~/.cache/tags')

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行
"let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0

" ---------------------------------------------------
Plugin 'jeffkreeftmeijer/vim-numbertoggle' "relative line number plugin
nnoremap <silent> <C-n> :set relativenumber!<cr>

" ---------------------------------------------------
Plugin 'majutsushi/tagbar'
let g:tagbar_left=0
let g:tagbar_width=30
let g:tagbar_autofocus = 1
nmap <leader>tb :TagbarToggle<CR>
nmap tl :TagbarToggle<CR>

" ---------------------------------------------------
" vim-color-solarized
Plugin 'altercation/vim-colors-solarized'
if !has('gui_running')
    set t_Co=256 " make sure our terminal use 256 color
    let g:solarized_termcolors = 256
endif


" ---------------------------------------------------
" nerdtree
Plugin 'scrooloose/nerdtree'
nmap <F3> :NERDTreeToggle<CR>
let NERDTreeWinSize=32
let NERDTreeWinPos="left"
let NERDTreeShowHidden=1
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=0
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'
let g:NERDTreeNodeDelimiter = "\u00a0"
let NERDTreeShowBookmarks=1
let NERDTreeAutoDeleteBuffer=1
let NERDTreeIgnore=['\~$[[file]]', '\.pyc$[[file]]', '\.swp$[[file]]', '^cscope\.\([a-z]\+\.\)\?out$[[file]]', '^cscope.tool$[[file]]']

autocmd vimenter * if !argc()|NERDTree|endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" ---------------------------------------------------
" minibufexpl
Plugin 'rexsi/minibufexpl.vim'
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
nnoremap [b :MBEbp <CR>
nnoremap ]b :MBEbn <CR>

" ---------------------------------------------------
Plugin 'Valloric/MatchTagAlways'
Plugin 'gko/vim-coloresque'
Plugin 'posva/vim-vue'

" ---------------------------------------------------
" vim-signature
Plugin 'kshenoy/vim-signature'

" ---------------------------------------------------
" ctrlp: invoke by <ctrl-p>
Plugin 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_follow_symlinks = 2
nnoremap <unique> <leader>bs :CtrlPBuffer<CR>

" " ---------------------------------------------------
Plugin 'dyng/ctrlsf.vim'
let g:ctrlsf_ackprg = 'ag'
let g:ctrlsf_position = 'left'
let g:ctrlsf_winsize = '40%'
let g:ctrlsf_context = '-B 5 -A 3'
let g:ctrlsf_auto_close = 0
nnoremap <Leader>ag :CtrlSF <C-r><C-w><CR>

" LargeFile
" ---------------------------------------------------
Plugin 'vim-scripts/LargeFile'
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

" ---------------------------------------------------
Plugin 'vim-scripts/AutoComplPop'
Plugin 'tpope/vim-endwise'

" ---------------------------------------------------
Plugin 'Yggdroot/indentLine'

" ---------------------------------------------------
Plugin 'sjl/gundo.vim'
nnoremap <F5> :GundoToggle<CR>

" ---------------------------------------------------
"Plugin 'SirVer/ultisnips'  "replace with the following three plugins
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'

" ---------------------------------------------------
Plugin 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'
let g:UltiSnipsEditSplit="vertical"

" ---------------------------------------------------
Plugin 'tpope/vim-fugitive'

" ---------------------------------------------------
Plugin 'bling/vim-airline'

" ---------------------------------------------------
Plugin 'vim-scripts/cscope.vim'
"nmap <leader>gs :cs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <leader>gg :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <leader>gc :cs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <leader>gt :cs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <leader>ge :cs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <leader>gf :cs find f <C-R>=expand("<cfile>")<CR><CR>
"nmap <leader>gi :cs find i <C-R>=expand("<cfile>")<CR><CR>
"nmap <leader>gd :cs find d <C-R>=expand("<cword>")<CR><CR>

" ---------------------------------------------------
Plugin 'vim-scripts/OmniCppComplete'
set tags+=./tags,.tags
" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
let OmniCpp_MayCompleteDot = 1   " 输入 .  后自动补全
let OmniCpp_MayCompleteArrow = 1 " 输入 -> 后自动补全
let OmniCpp_MayCompleteScope = 1 " 输入 :: 后自动补全
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType c setlocal omnifunc=ccomplete#Complete

" au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
" set completeopt=menuone,menu,longest

" ---------------------------------------------------
Plugin 'fatih/vim-go'
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
"autocmd FileType go nmap <leader>b  <Plug>(go-build)
"autocmd FileType go nmap <leader>t  <Plug>(go-test)
" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

"let g:go_fmt_autosave=0
"let g:go_asmfmt_autosave=0

" ---------------------------------------------------
Plugin 'skywind3000/gutentags_plus'
let g:gutentags_plus_nomap = 1

noremap <silent> <leader>gs :GscopeFind s <C-R><C-W><cr>
noremap <silent> <leader>gg :GscopeFind g <C-R><C-W><cr>
noremap <silent> <leader>gc :GscopeFind c <C-R><C-W><cr>
noremap <silent> <leader>gt :GscopeFind t <C-R><C-W><cr>
noremap <silent> <leader>ge :GscopeFind e <C-R><C-W><cr>
noremap <silent> <leader>gf :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>gi :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>gd :GscopeFind d <C-R><C-W><cr>
noremap <silent> <leader>ga :GscopeFind a <C-R><C-W><cr>
